{"version":3,"sources":["components/Error.jsx","components/Form.jsx","components/Image.jsx","components/ImageList.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Form","setSearch","useState","word","setWord","error","setError","action","onSubmit","event","preventDefault","trim","type","placeholder","onChange","target","value","Image","image","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ImageList","images","map","key","id","App","search","setImages","actualpage","setActualPage","totalpages","setTotalPages","useEffect","a","imagesByPage","URL","fetch","response","json","result","hits","calculateTotalPages","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","fetchAPI","onClick","newActualPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5e5b2552.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({ message }) => {\r\n  return <p className=\"my-3 p-4 text-center aler alert-primary\">{message}</p>;\r\n};\r\n\r\nError.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState } from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ setSearch }) => {\r\n  const [word, setWord] = useState('');\r\n  const [error, setError] = useState(false);\r\n  const searchImages = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Validar campo\r\n\r\n    if (word.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n    // Enviar término de busqueda a componente principal\r\n    setSearch(word);\r\n  };\r\n  return (\r\n    <form action=\"\" onSubmit={searchImages}>\r\n      <div className=\"row\">\r\n        <div className=\"form-group col-md-8\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control form-control-lg\"\r\n            placeholder=\"Search a image...\"\r\n            onChange={(event) => setWord(event.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group col-md-4\">\r\n          <input type=\"submit\" className=\"btn btn-lg btn-danger btn-block\" value=\"Search\" />\r\n        </div>\r\n      </div>\r\n      {error ? <Error message=\"Add a search word\" /> : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  setSearch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Image = ({ image }) => {\r\n  //Extraer variables\r\n  const { largeImageURL, likes, previewURL, tags, views } = image;\r\n  return (\r\n    <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n      <div className=\"card\">\r\n        <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n        <div className=\"card-body\">\r\n          <p className=\"card-text\">{likes} Likes</p>\r\n          <p className=\"card-text\">{views} Views</p>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <a href={largeImageURL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-primary btn-block\">\r\n            View Image\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nImage.propTypes = {\r\n  image: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport Image from './Image';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageList = ({ images }) => {\r\n  return (\r\n    <div className=\"col-12 p5 row\">\r\n      {images.map((image) => (\r\n        <Image key={image.id} image={image} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nImageList.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ImageList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Form from './components/Form';\r\nimport ImageList from './components/ImageList';\r\n\r\nfunction App() {\r\n  //State de la app\r\n  const [search, setSearch] = useState('');\r\n  //State de imagenes desde la API\r\n  const [images, setImages] = useState([]);\r\n  // State de página actual\r\n  const [actualpage, setActualPage] = useState(1);\r\n  // State de total paginas\r\n  const [totalpages, setTotalPages] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (search === '') return;\r\n    const fetchAPI = async () => {\r\n      const imagesByPage = 30;\r\n      const API_KEY = '';\r\n      const URL = `https://pixabay.com/api/?key=${API_KEY}&q=${search}&per_page=${imagesByPage}&page=${actualpage}`;\r\n\r\n      const response = await fetch(URL);\r\n      const result = await response.json();\r\n\r\n      setImages(result.hits);\r\n      // Calcular el total de paginas\r\n      const calculateTotalPages = Math.ceil(result.totalHits / imagesByPage);\r\n      setTotalPages(calculateTotalPages);\r\n\r\n      // Mover pantalla hacia arriba\r\n      const jumbotron = document.querySelector('.jumbotron');\r\n      jumbotron.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n    fetchAPI();\r\n  }, [actualpage, search]);\r\n\r\n  // Definir página anterior\r\n  const previousPage = () => {\r\n    const newActualPage = actualpage - 1;\r\n    if (newActualPage === 0) return;\r\n    setActualPage(newActualPage);\r\n  };\r\n  // Definir página siguiente\r\n  const nextPage = () => {\r\n    const newActualPage = actualpage + 1;\r\n    if (newActualPage > totalpages) return;\r\n    setActualPage(newActualPage);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"jumbotron\">\r\n        <p className=\"lead text-center\">Image Search</p>\r\n        <Form setSearch={setSearch} />\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <ImageList images={images} />\r\n        {actualpage === 1 ? null : (\r\n          <button type=\"button\" className=\"btn btn-info mr-1\" onClick={previousPage}>\r\n            &laquo; Previous page\r\n          </button>\r\n        )}\r\n        {actualpage === totalpages ? null : (\r\n          <button type=\"button\" className=\"btn btn-info\" onClick={nextPage}>\r\n            Next page &raquo;\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}